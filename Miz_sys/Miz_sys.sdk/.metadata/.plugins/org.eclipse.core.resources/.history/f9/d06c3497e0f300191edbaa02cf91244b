/*
 * main.c
 *
 *  Created on: 2019年10月16日
 *      Author: Administrator
 */




#include "dma_intr.h"
#include "timer_intr.h"
#include "sys_intr.h"
#include "uartps_intr.h"
//#include "xgpio.h"

static XScuGic Intc; //GIC
static  XAxiDma AxiDma;
static  XScuTimer Timer;//timer

volatile u32 RX_success;
volatile u32 TX_success;

volatile u32 RX_ready=1;
volatile u32 TX_ready=1;

#define TIMER_LOAD_VALUE    166666665 //0.5S

XUartPs Uart_Ps;		/* The instance of the UART Driver */



int Tries = NUMBER_OF_TRANSFERS;
int i;
int Index;
u32 *TxBufferPtr= (u32 *)TX_BUFFER_BASE;
u32 *RxBufferPtr=(u32 *)RX_BUFFER_BASE;
u8 Value=0;
float speed_tx;
float speed_rx;
//static XGpio Gpio;

//#define AXI_GPIO_DEV_ID	        XPAR_AXI_GPIO_0_DEVICE_ID


int axi_dma_test()
{
	int Status;
	char speed_r = 0;
	char speed_t = 0;
	TxDone = 0;
	RxDone = 0;
	Error = 0;

	xil_printf( "----DMA Test----\r\n");

	xil_printf("PKT_LEN=%d\r\n",MAX_PKT_LEN);

	for(Index = 0; Index < MAX_PKT_LEN; Index ++) {
			TxBufferPtr[Index] = Value;

			Value = (Value + 1) & 0xFF;
	}
	/* Flush the SrcBuffer before the DMA transfer, in case the Data Cache
	 * is enabled
	 */
	Xil_DCacheFlushRange((u32)TxBufferPtr, MAX_PKT_LEN);
	Timer_start(&Timer);
	while(1)
	//for(i = 0; i < Tries; i ++)
	{
		//RX DMA Transfer

		if(RX_ready)
		{
		   RX_ready=0;
		   Status = XAxiDma_SimpleTransfer(&AxiDma,(u32)RxBufferPtr,
					(u32)(MAX_PKT_LEN), XAXIDMA_DEVICE_TO_DMA);

		   if (Status != XST_SUCCESS) {return XST_FAILURE;}
		}

		//TX DMA Transfer
		if(TX_ready)
		{
			TX_ready=0;
			Status = XAxiDma_SimpleTransfer(&AxiDma,(u32) TxBufferPtr,
					(u32)(MAX_PKT_LEN), XAXIDMA_DMA_TO_DEVICE);

			if (Status != XST_SUCCESS) {return XST_FAILURE;}
		}

		if(RxDone)
		{
			//确保cache的数据都进入DDR
			Xil_DCacheInvalidateRange((u32)RxBufferPtr, MAX_PKT_LEN);
			RxDone=0;
			RX_ready=1;
			RX_success++;

			printf( "RX=%d\r\n",RX_success);

			/******************************************************/
			if(time_flag == 1)
			{
				time_flag = 0;
				Uart_Send(&Uart_Ps, RxBufferPtr, 10);
			}
			/******************************************************/
		}

		if(TxDone)
		{
			TxDone=0;
			TX_ready=1;
			TX_success++;
		}
/**********************
   if(usec==2)
		{

			usec=0;

	    	xil_printf("RX=%d\r\n",RX_success);
			speed_rx = MAX_PKT_LEN*RX_success/1024/1024;
			//sprintf(speed_r,"RX_sp=%.2fMB/S",speed_rx);
			xil_printf("%s\r\n",speed_r);


			xil_printf("TX=%d\r\n",TX_success);
			speed_tx = MAX_PKT_LEN*TX_success/1024/1024;
			//sprintf(speed_t,"TX_sp=%.2fMB/S",speed_tx);
			xil_printf("%s\r\n",speed_t);

			RX_success=0;
			TX_success=0;

		}
		****************************/

		if (Error) {
			xil_printf("Failed test transmit%s done, "
			"receive%s done\r\n", TxDone? "":" not",
							RxDone? "":" not");
			goto Done;
		}

	}

	/* Disable TX and RX Ring interrupts and return success */
	DMA_DisableIntrSystem(&Intc, TX_INTR_ID, RX_INTR_ID);
Done:
	xil_printf("--- Exiting Test --- \r\n");

	return XST_SUCCESS;

}

int init_intr_sys()
{
	DMA_Intr_Init(&AxiDma,0);//initial interrupt system
	Timer_init(&Timer,TIMER_LOAD_VALUE,0);
	Init_Intr_System(&Intc); // initial DMA interrupt system
	Setup_Intr_Exception(&Intc);
	DMA_Setup_Intr_System(&Intc,&AxiDma,TX_INTR_ID,RX_INTR_ID);//setup dma interrpt system
	Timer_Setup_Intr_System(&Intc,&Timer,TIMER_IRPT_INTR);
	DMA_Intr_Enable(&Intc,&AxiDma);

	/*****************************************/

	/*****************************************/

}

int main(void)
{
	printf( "begin\r\n");
	printf( "begin1\r\n");
	init_intr_sys();
	printf( "begin2\r\n");
	printf( "begin3\r\n");
	axi_dma_test();

}



