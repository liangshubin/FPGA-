/*
 * main.c
 *
 *  Created on: 2019年10月16日
 *      Author: Administrator
 */



#include "uartps_intr.h"
#include "dma_intr.h"
#include "timer_intr.h"
#include "sys_intr.h"
#include "stdio.h"
//#include "xgpio.h"

#define HITS_OF_EVENT_LEN 4
#define HITS_OF_EVENT_INTERVAL 1000

typedef struct {
	u8 ch;
	u32 time_ts;
} hit_t;

static XScuGic Intc; //GIC
static  XAxiDma AxiDma;
static  XScuTimer Timer;//timer

volatile u32 RX_success;
volatile u32 TX_success;

volatile u32 RX_ready=1;
volatile u32 TX_ready=1;

//#define TIMER_LOAD_VALUE    166666665 //0.5S

#define TIMER_LOAD_VALUE    0x13D92D3F //1S

XUartPs Uart_Ps;		/* The instance of the UART Driver */

int x = 0;
int Tries = NUMBER_OF_TRANSFERS;
int i;
int Index;
u8 *TxBufferPtr= (u8 *)TX_BUFFER_BASE;
u32 *RxBufferPtr=(u32 *)RX_BUFFER_BASE;

hit_t hits_of_event[HITS_OF_EVENT_LEN];
u8 hit_current;

/********************************************************/
u8 SEND_LENGTH = 1;      //ADC发送的字节长度： 32*SEND_LENGTH
int GATE = 4000;		 //门限值的设定
u8  Clear_buffer[128] = {0};
u8  My_buffer[512] = {0};
u8  My_buffer_backup[512] = {0};
u8  start_flag [2] = {'*','*'};
u8  over_flag [2] = {'#','#'};
char Data_Updat_Flag = 0;
/********************************************************/

u8 Value=0;
float speed_tx;
float speed_rx;
//static XGpio Gpio;

//#define AXI_GPIO_DEV_ID	        XPAR_AXI_GPIO_0_DEVICE_ID

void hit_dma_to_hit_arr(hit_t *hit_arr, u8 *hit_dma_buff)
{
	u8 i = 0;

	for (i = 0; i < 8; i++) {
		hit_arr[i].ch = hit_dma_buff[i * 4];
		hit_arr[i].time_ts = hit_dma_buff[i * 4 + 1] << 16 + hit_dma_buff[i * 4 + 2] <<8 + hit_dma_buff[i * 4 + 3];
	}
}


u8 hit_filter(u8 *hits_dma_buff)
{
	u8 hits_of_event_ready = 0;
	hit_t hits_arr[8];
	u8 i, j;
	u8 hit_repeated;

	hit_dma_to_hit_arr(hits_arr, hits_dma_buff);

	for (i = 0; i < 8; i++) {
		if (hit_current != 0) {
			// check whether channel of this hit is repeated in hits_of_event array
			hit_repeated = 0;
			for (j = 0; j < hit_current; j++) {
				if (hit_arr[i].ch == hits_of_event[j].ch) {
					hit_repeated = 1;
					break;
				}
			}

			if (hit_repeated) {
				continue;
			}

			if (hit_arr[i].time_ts - hits_of_event[0].time_ts > HITS_OF_EVENT_INTERVAL) {
				hit_current = 0;
			}
		}

		memcpy(&hits_of_event[hit_current], &hit_arr[i], sizeof(hit_t));
		hit_current++;

		if (hit_current == HITS_OF_EVENT_LEN) {
			hits_of_event_ready = 1;
			break;
		}
	}

	return hits_of_event_ready;
}

int axi_dma_test()
{
	int Status;
	char speed_r = 0;
	char speed_t = 0;
	TxDone = 0;
	RxDone = 0;
	Error = 0;
	u8 hits_of_event_ready = 0;

	//xil_printf( "----DMA Test----\r\n");

	//xil_printf("PKT_LEN=%d\r\n",MAX_PKT_LEN);

	for(Index = 0; Index < MAX_PKT_LEN; Index ++) {
			TxBufferPtr[Index] = Value;

			Value = (Value + 1) & 0xFF;
	}
	/* Flush the SrcBuffer before the DMA transfer, in case the Data Cache
	 * is enabled
	 */
	Xil_DCacheFlushRange((u32)TxBufferPtr, MAX_PKT_LEN);
	Timer_start(&Timer);
	while(1)
	//for(i = 0; i < Tries; i ++)
	{
		//RX DMA Transfer

		if(RX_ready)
		{
		   RX_ready=0;
		   //memcpy((void*)RxBufferPtr,Clear_buffer,32);  //将RxBuffer的32字节接收区域清零
		   Status = XAxiDma_SimpleTransfer(&AxiDma,(u32)RxBufferPtr,
					(u32)(MAX_PKT_LEN), XAXIDMA_DEVICE_TO_DMA);

		/******************************************************************************/
		   memcpy((void*)My_buffer,RxBufferPtr,32);

		   if (My_buffer_backup != My_buffer)
		   {
			   Data_Updat_Flag = 1;
			   memcpy((void*)My_buffer_backup,My_buffer,32);

		   }
		   else
		   {
			   Data_Updat_Flag = 0;
		   }
		   if (Data_Updat_Flag)
		   {
			   hits_of_event_ready = hit_filter(My_buffer);

			   Uart_Send(&Uart_Ps, start_flag, 2);
			   Uart_Send(&Uart_Ps, My_buffer, 32);
			   Uart_Send(&Uart_Ps, over_flag, 2);
			   /*****************************
			   for(i=0;i<80;i++)
			   {
				   //printf( "%d\r\n",i);
				   u8 Test_buffer = {My_buffer[0+4*i],My_buffer[1+4*i],My_buffer[2+4*i],My_buffer[3+4*i]};
				   Uart_Send(&Uart_Ps, (u8 *)Test_buffer, 4);
			   }
			   /*****************************/


		   }

	   /*****************************************************************************/
		  // Uart_Send(&Uart_Ps, My_buffer, 32);
		   if (Status != XST_SUCCESS) {return XST_FAILURE;}
		}

		//TX DMA Transfer
		if(TX_ready)
		{
			TX_ready=0;
			Status = XAxiDma_SimpleTransfer(&AxiDma,(u32) TxBufferPtr,
					(u32)(MAX_PKT_LEN), XAXIDMA_DMA_TO_DEVICE);

			if (Status != XST_SUCCESS) {return XST_FAILURE;}
		}

		if(RxDone)
		{
			//确保cache的数据都进入DDR
			Xil_DCacheInvalidateRange((u32)RxBufferPtr, MAX_PKT_LEN);
			RxDone=0;
			RX_ready=1;
			//RX_ready=0;
			RX_success++;
		}

	}



		if(TxDone)
		{
			TxDone=0;
			TX_ready=1;
			TX_success++;
		}


		if (Error)
		{
			xil_printf("Failed test transmit%s done, "
			"receive%s done\r\n", TxDone? "":" not",
							RxDone? "":" not");
			goto Done;
		}


	/* Disable TX and RX Ring interrupts and return success */
	DMA_DisableIntrSystem(&Intc, TX_INTR_ID, RX_INTR_ID);
Done:
	xil_printf("--- Exiting Test --- \r\n");

	return XST_SUCCESS;

}

int init_intr_sys()
{
	DMA_Intr_Init(&AxiDma,0);//initial interrupt system
	Timer_init(&Timer,TIMER_LOAD_VALUE,0);
	Init_Intr_System(&Intc); // initial DMA interrupt system
	Setup_Intr_Exception(&Intc);
	DMA_Setup_Intr_System(&Intc,&AxiDma,TX_INTR_ID,RX_INTR_ID);//setup dma interrpt system
	Timer_Setup_Intr_System(&Intc,&Timer,TIMER_IRPT_INTR);
	DMA_Intr_Enable(&Intc,&AxiDma);
	/*****************************************/
	Uart_Init(&Uart_Ps,UART_DEVICE_ID);
	//printf( "UART initial success\r\n");
	/*****************************************/

}

void ad7606_send_length(u32 adc_addr, u32 send_len)
{
	/* provide length to AD7606 */
	AD7606_SAMPLE_mWriteReg(adc_addr, REG0_OFFSET, send_len)  ;
}

void ad7606_gate(u32 adc_addr, u32 gate)
{
	/* provide length to AD7606 */
	AD7606_SAMPLE_mWriteReg(adc_addr, REG1_OFFSET, gate)  ;
}




int main(void)
{
	init_intr_sys();
	/*设定门限值*/
	ad7606_gate(AD7606_BASE, GATE);
	/*ADC发送的字节长度：32*SEND_LENGTH*/
	ad7606_send_length(AD7606_BASE,SEND_LENGTH);

	// initialize hit event
	memset(hits_of_event, 0, sizeof(hits_of_event) *HITS_OF_EVENT_LEN);
	hit_current = 0;

	axi_dma_test();

}



